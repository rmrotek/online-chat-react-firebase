{"version":3,"sources":["components/Message/Message.js","components/Form/Form.js","components/App/App.js","firebase/firebase.js","serviceWorker.js","index.js"],"names":["Message","react_default","a","createElement","className","this","props","message","userName","Component","Form","state","list","messageRef","firebase","database","ref","child","handleChange","event","_this","setState","target","value","handleNameChange","handleSend","newItem","push","listenMessages","nextProps","user","displayName","_this2","limitToLast","on","Object","values","val","key","map","item","index","components_Message_Message","type","placeholder","onChange","onKeyPress","handleKeyPress","bind","onClick","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","href","rel","components_Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9183f481.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Message.css'\r\n\r\n\r\n//take userName and message props \r\n\r\nclass Message extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"message\">\r\n                <span className=\"message-author\">\r\n                    {this.props.message.userName}:\r\n                </span>\r\n        {this.props.message.message}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Message;","import React, { Component } from 'react';\r\nimport Message from '../Message/Message';\r\n\r\nimport firebase from 'firebase';\r\n\r\nimport './Form.css'\r\n\r\n\r\nclass Form extends Component {\r\n\r\n\r\n  state = {\r\n    userName: 'Mr PlaceHolder',\r\n    message: '',\r\n    list: [],\r\n  }\r\n\r\n  //reference for 'messages' in db\r\n  messageRef = firebase.database().ref().child('messages');\r\n\r\n  //imports msgs from db\r\n  componentDidMount() {\r\n    this.listenMessages()\r\n  }\r\n\r\n\r\n  //when logged in\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.user) {\r\n      this.setState({ 'userName': nextProps.user.displayName });\r\n    }\r\n  }\r\n\r\n\r\n  // listen for 'messages' changes, get last 10, put them in state.list\r\n  listenMessages() {\r\n    this.messageRef\r\n      .limitToLast(10)\r\n      .on('value', message => {\r\n        this.setState({\r\n          list: Object.values(message.val()),\r\n        });\r\n      });\r\n  }\r\n\r\n  //for input field\r\n  handleChange = event => {\r\n    this.setState({ message: event.target.value })\r\n  }\r\n\r\n  handleNameChange = event => {\r\n    this.setState({ userName: event.target.value })\r\n  }\r\n\r\n  // send msg to <Message /> component\r\n  handleSend = () => {\r\n    // check if there is anything typed\r\n    if (this.state.message) {\r\n      // make new msg item to list it later from array\r\n      var newItem = {\r\n        userName: this.state.userName,\r\n        message: this.state.message\r\n      }\r\n      this.messageRef.push(newItem);\r\n      this.setState({ message: '' })\r\n    }\r\n  }\r\n\r\n  // make msg send on ENTER press\r\n  handleKeyPress(event) {\r\n    if (event.key !== 'Enter') return;\r\n    this.handleSend();\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className='form'>\r\n        <div className='form-msg-list'>\r\n\r\n          {this.state.list.map((item, index) =>\r\n            <Message key={index} message={item} />\r\n          )}\r\n        </div>\r\n\r\n        <div className='form-input-row'>\r\n          <input\r\n            className='form-input'\r\n            type='text'\r\n            placeholder='Type message here'\r\n            value={this.state.message}\r\n            onChange={this.handleChange}\r\n            onKeyPress={this.handleKeyPress.bind(this)}\r\n\r\n          />\r\n\r\n          <button className='form-msg-send' onClick={this.handleSend}>\r\n            Send\r\n          </button>\r\n\r\n        </div>\r\n        <p>Current username:\r\n          <span>\r\n            <input\r\n              className='form-input'\r\n              type='text'\r\n              placeholder={this.state.userName}\r\n              value={this.state.userName}\r\n              onChange={this.handleNameChange} />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Form","import React, { Component } from 'react';\nimport Form from '../Form/Form';\nimport firebase from 'firebase';\nimport firebaseConfig from '../../firebase/firebase'\n\n// css last\nimport './App.css';\n\n//init firebase from cfg\nfirebase.initializeApp(firebaseConfig);\n\n\n\n\nclass App extends Component {\n\n  state = {\n    user: null,\n  }\n\n// for google login\n\n//   // check for login changes\n//   componentDidMount = () => {\n//     firebase.auth().onAuthStateChanged(user => {\n//       this.setState({ user });\n//     });\n//   }\n\n\n//   // handlers for login and logout\n\n//   handleSignIn = () => {\n//     const provider = new firebase.auth.GoogleAuthProvider();\n//     firebase.auth().signInWithPopup(provider);\n//   }\n\n//   handleLogOut = () => {\n//     firebase.auth().signOut();\n//   }\n\n\n\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className='app-header'>\n          <h1>Online chat</h1>\n          <h4>React + Firebase</h4>\n          <a className='credits' href='https://rmrotek.github.io/' rel='noopener noreferrer' target='_blank'>Made by Remigiusz Mrotek</a>\n          <p>Change your username below the chat window</p>\n\n\n          {/* <div className='app-user-login'>\n            {!this.state.user ? (\n              <button className='btn' onClick={this.handleSignIn}>Sign in</button>\n            ) : (\n                <button className='btn' onClick={this.handleLogOut}>Logout</button>\n              )}\n          </div> */}\n        </div>\n        <div className='app-main'>\n          <Form user={this.state.user} />\n\n        </div>\n       \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\r\n\r\n\r\nexport default {\r\n  apiKey: \"AIzaSyAfuEFWmsjU7AifzBLomYYd459Pz02zysE\",\r\n  authDomain: \"online-chat-6203d.firebaseapp.com\",\r\n  databaseURL: \"https://online-chat-6203d.firebaseio.com\",\r\n  projectId: \"online-chat-6203d\",\r\n  storageBucket: \"online-chat-6203d.appspot.com\",\r\n  messagingSenderId: \"107912395345\"\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}